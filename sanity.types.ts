/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Youtube = {
  _type: "youtube";
  url: string;
  title: string;
};

export type NewsBlock = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h3" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt: string;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Youtube | {
  text: string;
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: string;
    _type: "image";
  };
  _type: "textWithImage";
  _key: string;
}>;

export type LeagueTables = {
  _id: string;
  _type: "leagueTables";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  headers: Array<{
    _key: string;
  } & LocaleString>;
  rows: Array<{
    cells: Array<string>;
    _type: "row";
    _key: string;
  }>;
};

export type GameCalendar = {
  _id: string;
  _type: "gameCalendar";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  date: string;
  gameType: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "gameType";
  };
  location: string;
  time: string;
  firstTeam: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "team";
  };
  secondTeam: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "team";
  };
  isCompleted?: boolean;
  firstTeamGoals?: number;
  secondTeamGoals?: number;
};

export type GameType = {
  _id: string;
  _type: "gameType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: LocaleString;
};

export type Team = {
  _id: string;
  _type: "team";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type NewsSinglePage = {
  _id: string;
  _type: "newsSinglePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  seo?: {
    title?: LocaleString;
    desc?: LocaleString;
  };
  title: LocaleString;
  slugPL: Slug;
  slugEN: Slug;
  excerpt: LocaleText;
  mainPostImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt: LocaleString;
    _type: "image";
  };
  content?: LocaleNewsBlock;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  seo?: {
    title: LocaleString;
    desc: LocaleString;
  };
  aboutUsSection: {
    description: LocaleText;
    activePlayers: {
      number: string;
      text: LocaleString;
    };
    gamePerSeasson: {
      number: string;
      text: LocaleString;
    };
    trainingAtWeek: {
      number: string;
      text: LocaleString;
    };
    leagueNumbers: {
      number: string;
      text: LocaleString;
    };
  };
};

export type LocaleNewsBlock = {
  _type: "localeNewsBlock";
  pl?: NewsBlock;
  en?: NewsBlock;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type LocaleText = {
  _type: "localeText";
  pl: string;
  en: string;
};

export type LocaleString = {
  _type: "localeString";
  pl: string;
  en: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Youtube | NewsBlock | LeagueTables | GameCalendar | GameType | Team | NewsSinglePage | Slug | HomePage | LocaleNewsBlock | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | LocaleText | LocaleString;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: getGamesCalendarQuery
// Query: {  "pastGames": *[_type == "gameCalendar" && dateTime(date) < dateTime(now())] |     order(date desc) [0...12] {      _id,      _type,      date,      location,      time,      gameType->{        _id,        name      },      firstTeam->{        _id,        name,        logo {          asset->{            _id,            url          }        }      },      secondTeam->{        _id,        name,        logo {          asset->{            _id,            url          }        }      },      isCompleted,      firstTeamGoals,      secondTeamGoals    },  "futureGames": *[_type == "gameCalendar" && dateTime(date) >= dateTime(now())] |     order(date asc) [0...12] {      _id,      _type,      date,      location,      time,      gameType->{        _id,        name      },      firstTeam->{        _id,        name,        logo {          asset->{            _id,            url          }        }      },      secondTeam->{        _id,        name,        logo {          asset->{            _id,            url          }        }      },      isCompleted,      firstTeamGoals,      secondTeamGoals    }}
export type GetGamesCalendarQueryResult = {
  pastGames: Array<{
    _id: string;
    _type: "gameCalendar";
    date: string;
    location: string;
    time: string;
    gameType: {
      _id: string;
      name: LocaleString;
    };
    firstTeam: {
      _id: string;
      name: string;
      logo: {
        asset: {
          _id: string;
          url: string | null;
        } | null;
      } | null;
    };
    secondTeam: {
      _id: string;
      name: string;
      logo: {
        asset: {
          _id: string;
          url: string | null;
        } | null;
      } | null;
    };
    isCompleted: boolean | null;
    firstTeamGoals: number | null;
    secondTeamGoals: number | null;
  }>;
  futureGames: Array<{
    _id: string;
    _type: "gameCalendar";
    date: string;
    location: string;
    time: string;
    gameType: {
      _id: string;
      name: LocaleString;
    };
    firstTeam: {
      _id: string;
      name: string;
      logo: {
        asset: {
          _id: string;
          url: string | null;
        } | null;
      } | null;
    };
    secondTeam: {
      _id: string;
      name: string;
      logo: {
        asset: {
          _id: string;
          url: string | null;
        } | null;
      } | null;
    };
    isCompleted: boolean | null;
    firstTeamGoals: number | null;
    secondTeamGoals: number | null;
  }>;
};
// Variable: getLeagueTablesQuery
// Query: *[_type == "leagueTables"] {    _createdAt,    _updatedAt,    _id,    title,    headers[] {       pl,      en    },    rows[] {      cells    }  }
export type GetLeagueTablesQueryResult = Array<{
  _createdAt: string;
  _updatedAt: string;
  _id: string;
  title: string;
  headers: Array<{
    pl: string;
    en: string;
  }>;
  rows: Array<{
    cells: Array<string>;
  }>;
}>;
// Variable: getHomePageAboutUsSectionQuery
// Query: *[_type == "homePage"]{    aboutUsSection {      description{en, pl},      activePlayers{number, text{en, pl}},      gamePerSeasson{number, text{en, pl}},      trainingAtWeek{number, text{en, pl}},      leagueNumbers{number, text{en, pl}}    }}
export type GetHomePageAboutUsSectionQueryResult = Array<{
  aboutUsSection: {
    description: {
      en: string;
      pl: string;
    };
    activePlayers: {
      number: string;
      text: {
        en: string;
        pl: string;
      };
    };
    gamePerSeasson: {
      number: string;
      text: {
        en: string;
        pl: string;
      };
    };
    trainingAtWeek: {
      number: string;
      text: {
        en: string;
        pl: string;
      };
    };
    leagueNumbers: {
      number: string;
      text: {
        en: string;
        pl: string;
      };
    };
  };
}>;
// Variable: getHomePageLatestNewsQuery
// Query: *[_type == "newsSinglePage"] | order(_createdAt desc) [0..3] {      _id,      title{pl,en},      slugPL,      slugEN,      excerpt{pl,en},      mainPostImage{asset, alt{pl, en}},      _createdAt    }
export type GetHomePageLatestNewsQueryResult = Array<{
  _id: string;
  title: {
    pl: string;
    en: string;
  };
  slugPL: Slug;
  slugEN: Slug;
  excerpt: {
    pl: string;
    en: string;
  };
  mainPostImage: {
    asset: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    alt: {
      pl: string;
      en: string;
    };
  };
  _createdAt: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "{\n  \"pastGames\": *[_type == \"gameCalendar\" && dateTime(date) < dateTime(now())] | \n    order(date desc) [0...12] {\n      _id,\n      _type,\n      date,\n      location,\n      time,\n      gameType->{\n        _id,\n        name\n      },\n      firstTeam->{\n        _id,\n        name,\n        logo {\n          asset->{\n            _id,\n            url\n          }\n        }\n      },\n      secondTeam->{\n        _id,\n        name,\n        logo {\n          asset->{\n            _id,\n            url\n          }\n        }\n      },\n      isCompleted,\n      firstTeamGoals,\n      secondTeamGoals\n    },\n  \"futureGames\": *[_type == \"gameCalendar\" && dateTime(date) >= dateTime(now())] | \n    order(date asc) [0...12] {\n      _id,\n      _type,\n      date,\n      location,\n      time,\n      gameType->{\n        _id,\n        name\n      },\n      firstTeam->{\n        _id,\n        name,\n        logo {\n          asset->{\n            _id,\n            url\n          }\n        }\n      },\n      secondTeam->{\n        _id,\n        name,\n        logo {\n          asset->{\n            _id,\n            url\n          }\n        }\n      },\n      isCompleted,\n      firstTeamGoals,\n      secondTeamGoals\n    }\n}": GetGamesCalendarQueryResult;
    "\n  *[_type == \"leagueTables\"] {\n    _createdAt,\n    _updatedAt,\n    _id,\n    title,\n    headers[] { \n      pl,\n      en\n    },\n    rows[] {\n      cells\n    }\n  }\n": GetLeagueTablesQueryResult;
    "\n *[_type == \"homePage\"]{\n    aboutUsSection {\n      description{en, pl},\n      activePlayers{number, text{en, pl}},\n      gamePerSeasson{number, text{en, pl}},\n      trainingAtWeek{number, text{en, pl}},\n      leagueNumbers{number, text{en, pl}}\n    }\n}": GetHomePageAboutUsSectionQueryResult;
    "\n  *[_type == \"newsSinglePage\"] | order(_createdAt desc) [0..3] {\n      _id,\n      title{pl,en},\n      slugPL,\n      slugEN,\n      excerpt{pl,en},\n      mainPostImage{asset, alt{pl, en}},\n      _createdAt\n    }\n  ": GetHomePageLatestNewsQueryResult;
  }
}
