/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type GameCalendar = {
  _id: string;
  _type: "gameCalendar";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  date: string;
  gameType: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "gameType";
  };
  firstTeam: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "team";
  };
  secondTeam: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "team";
  };
  isCompleted?: boolean;
  firstTeamGoals?: number;
  secondTeamGoals?: number;
};

export type GameType = {
  _id: string;
  _type: "gameType";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: LocaleString;
};

export type Team = {
  _id: string;
  _type: "team";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  seo?: {
    title: LocaleString;
    desc: LocaleString;
  };
};

export type LocaleString = {
  _type: "localeString";
  pl?: string;
  en?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Slug | GameCalendar | GameType | Team | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | HomePage | LocaleString;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: getGamesCalendarQuery
// Query: *[_type == "gameCalendar"] | order(date asc) {    _id,    _type,    date,    gameType->{      _id,      name    },    firstTeam->{      _id,      name,      logo {        asset->{          _id,          url        }      }    },    secondTeam->{      _id,      name,      logo {        asset->{          _id,          url        }      }    },    isCompleted,    firstTeamGoals,    secondTeamGoals  }
export type GetGamesCalendarQueryResult = Array<{
  _id: string;
  _type: "gameCalendar";
  date: string;
  gameType: {
    _id: string;
    name: LocaleString;
  };
  firstTeam: {
    _id: string;
    name: string;
    logo: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  };
  secondTeam: {
    _id: string;
    name: string;
    logo: {
      asset: {
        _id: string;
        url: string | null;
      } | null;
    } | null;
  };
  isCompleted: boolean | null;
  firstTeamGoals: number | null;
  secondTeamGoals: number | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"gameCalendar\"] | order(date asc) {\n    _id,\n    _type,\n    date,\n    gameType->{\n      _id,\n      name\n    },\n    firstTeam->{\n      _id,\n      name,\n      logo {\n        asset->{\n          _id,\n          url\n        }\n      }\n    },\n    secondTeam->{\n      _id,\n      name,\n      logo {\n        asset->{\n          _id,\n          url\n        }\n      }\n    },\n    isCompleted,\n    firstTeamGoals,\n    secondTeamGoals\n  }": GetGamesCalendarQueryResult;
  }
}
